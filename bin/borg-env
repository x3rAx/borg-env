#!/bin/bash
# TODO: MAYBE add a template environment file that is copied to new environments
# TODO: remove "Usage" from commands
# TODO: exit code on "Usage" output of subcommands?
# TODO: reload current env after edit

# Treat unset variables as an error.
set -u

APP_NAME='borg-env'

SCRIPT="$(realpath "$0")"
SCRIPT_NAME="$(basename "$SCRIPT")"

#CONFIG_DIR="${XDG_CONFIG_HOME:-"${HOME}/.config"}/borg-env"
CONFIG_DIR="${XDG_CONFIG_HOME:-"${HOME}/.config"}/borg-env"
ENVIRONMENTS="${CONFIG_DIR}/environments"
ENV_SUFFIX='env'

DEFAULT_ENV='_default_'

EDIT="${EDITOR:-vim}"

USAGE="
  Usage:
    ${SCRIPT_NAME} -h|--help
    ${SCRIPT_NAME} <command>
"
COMMANDS="
  COMMANDS:
    help    - Print more detailed help
    create  - Create new environment
    edit    - Edit environment
    reload  - Reload current environment
    set     - Set an environment
    run     - Run a command with an environment
"
HELP="
  Set or edit the borg environment of the current shell.
  The editor will be determined by the \$EDITOR environment variable and fall
  back to vim.

  When the environment is switched, every variable prefixed with \"BORG_\"
  will be cleared. Then the \"_default_\" config will be loaded before the
  actual environment file is processes.

  The config file will be placed in the \$XDG_CONFIG_HOME. If it is not set
  ${APP_NAME} will fall back to \"\$HOME/.config\".

  WARNING:
  You can set any environment variable in the environment config but only the
  \"\$BORG_*\" variables will be reset to default when you change the
  environment. Use the \"${DEFAULT_ENV}\" environment config to reset others too.

  COMMANDS:
    help
      Print this help.

    create <env-name>
      Create a new environment. This will create a new file in the config
      directory and then start an editor to customize the config.

    edit <env-name|->
      Start an editor to edit an existing environment. Pass '-' as name to edit
      the currently active config. To edit the default variables use
      \"${DEFAULT_ENV}\" as name.

    rename <env-name|-> <new-name>
        Rename an environment.

    clone <env-name|-> <new-env-name>
      Clone an environment config to a new name. Pass '-' as name to clone the
      currently active config.

    remove <env-name>
      Delete an environment. This can't be undone but luckily, if you use this
      tool, you are likely going to have a backup anyways ;)

    list
      List all environments.

    reload
      NOT IMPLEMENTED YET
      Reload the current environment. Useful when the config has been changed
      externally. This is not needed when using \`edit\` to change the currently
      loaded config.

    set [env-name]
      NOT IMPLEMENTED YET
      Set the current environment. Leave env-name blank to load the default
      config.

    run <env-name> <command>
      Run a command in a specific environment. Useful when you don't want to
      pollute your environment when running borg.

    show <env-name>
      Print the variables that this environment uses.

    shell-init
      NOT IMPLEMENTED YET
      Eval the result of this in your shell config to enable switching
      environments:

        eval \"\$(${SCRIPT_NAME} shell-init)\"
"


main() {
    local cmd="$1"
    shift

    case $cmd in
        '')
            usage
            ;;
        '-h'|'--help'|'help')
            help
            ;;
        'reload'|'set'|'shell-init')
            echo "">&2
            echo "  SORRY: This feature is not implemented yet." >&2
            echo "">&2
            EXIT 1
            ;;
        'create'|'edit'|'rename'|'clone'|'remove'|\
        'list'|'reload'|'set'|'run'|'show')
            setup
            cmd_${cmd} "$@"
            ;;
        *)
            echo "ERROR: Unknown command \"${cmd}\"." >&2
            usage >&2
            EXIT 1
            ;;
    esac

    EXIT
}

cmd_create() {
    local name="$1"
    local file="$(make_env_file_name "${name}")"

    if [[ $name == '' ]]; then
        echo "
  Usage:
    ${SCRIPT_NAME} create <env-name>
"
        EXIT
    fi

    if ! [[ $name =~ ^[a-zA-Z0-9_.-]+$ ]]; then
        EXIT_ERROR 1 "The environment name is invalid. Allowed characters are: 'a-z', 'A-Z', '0-9', '_', '.', '-'"
    fi

    if [[ $name =~ ^\. ]]; then
        EXIT_ERROR 1 "The environment name must not start with a dot!"
    fi

    if [[ -f $file ]]; then
        EXIT_ERROR 1 "An environment with that name already exists! Use \`edit\` to edit it."
    fi

    touch "$file" || EXIT_ERROR 1 "Could not create environment file \"${file}\"!"
    echo "Created new environment \"${name}\"."

    edit "$file"
}


cmd_edit() {
    local name="$(get_env_name "$1")"
    local file="$(make_env_file_name "${name}")"

    if [[ $name == '' ]]; then
        echo "
  Usage:
    ${SCRIPT_NAME} edit <env-name|->
"
        EXIT
    fi

    if [[ ! -f $file ]]; then
        EXIT_ERROR 1 "Environment \"${name}\" does not exist. Use \`create\` to create it."
    fi

    edit "$file"
}


cmd_rename() {
    local name="$(get_env_name "$1")"
    local new_name="$2"
    local file="$(make_env_file_name "${name}")"
    local new_file="$(make_env_file_name "${new_name}")"

    if [[ -z $name ]] || [[ -z $new_name ]]; then
        echo "
  Usage:
    ${SCRIPT_NAME} rename <env-name|-> <new-name>
"
        EXIT
    fi

    if [[ ! -f $file ]]; then
        EXIT_ERROR 1 "Environment \"${name}\" does not exist."
    fi

    # TODO: These checks are similar to creation / cloning. Refactor this!
    if ! [[ $new_name =~ ^[a-zA-Z0-9_.-]+$ ]]; then
        EXIT_ERROR 1 "The environment name is invalid. Allowed characters are: 'a-z', 'A-Z', '0-9', '_', '.', '-'"
    fi

    if [[ $new_name =~ ^\. ]]; then
        EXIT_ERROR 1 "The environment name must not start with a dot!"
    fi

    if [[ -f $new_file ]]; then
        EXIT_ERROR 1 "An environment with that name already exists!"
    fi

    mv "$file" "$new_file" || EXIT_ERROR 1 "Could not rename environment file \"${file}\" to \"${new_file}\"!"
    echo "Renamed environment \"${name}\" to \"${new_name}\"."
}


cmd_clone() {
    local name="$(get_env_name "$1")"
    local new_name="$2"
    local file="$(make_env_file_name "${name}")"
    local new_file="$(make_env_file_name "${new_name}")"

    if [[ -z $name ]] || [[ -z $new_name ]]; then
        echo "
  Usage:
    ${SCRIPT_NAME} clone <env-name|-> <new-env-name>
"
        EXIT
    fi

    if [[ ! -f $file ]]; then
        EXIT_ERROR 1 "Environment \"${name}\" does not exist. Use \`create\` to create it."
    fi

    # TODO: These checks are the same as for creation. Refactor this!
    if ! [[ $new_name =~ ^[a-zA-Z0-9_.-]+$ ]]; then
        EXIT_ERROR 1 "The environment name is invalid. Allowed characters are: 'a-z', 'A-Z', '0-9', '_', '.', '-'"
    fi

    if [[ $new_name =~ ^\. ]]; then
        EXIT_ERROR 1 "The environment name must not start with a dot!"
    fi

    if [[ -f $new_file ]]; then
        EXIT_ERROR 1 "An environment with that name already exists! Use \`edit\` to edit it."
    fi

    cp "$file" "$new_file" || EXIT_ERROR 1 "Could not clone environment file \"${file}\" to \"${new_file}\"!"
    echo "Cloned new environment \"${name}\"."

    edit "$new_file"
}


cmd_remove() {
    local name="$1"
    local file="$(make_env_file_name "${name}")"

    if [[ ! -f $file ]]; then
        EXIT_ERROR 1 "Environment \"${name}\" does not exist."
    fi

    echo "Do you really want to remove the environment \"${name}\"?" >&2
    read -p "(Type uppercase yes to confirm): " confirm

    if [[ $confirm != 'YES' ]]; then
        EXIT
    fi

    rm "$file"
    echo "Deleted environment \"${name}\"."
}


cmd_list() {
    local list=($(ls "$ENVIRONMENTS"))

    for env in ${list[@]}; do
        env="${env/%.env/}"
        active=''

        if [[ ${BORG_ENV:-} == $env ]]; then
            active='*'
        fi

        echo " ${active:- } ${env}"
    done
}


cmd_run() {
    local name="$1"
    shift
    local cmd=("$@")

    if [[ $name == '' ]] || [[ $cmd == '' ]]; then
        echo "
  Usage:
    ${SCRIPT_NAME} run <env-name> <cmd>
"
        EXIT
    fi

    # TODO: reset IFS?
    IFS=$'\n'
    for line in $(parse_env_file "$name"); do
        set -o allexport
        declare -g "$line"
        set +o allexport
    done

    # Run the command
    ${cmd[@]}
}


cmd_show() {
    local name="$1"

    if [[ $name == '' ]] || [[ $cmd == '' ]]; then
        echo "
  Usage:
    ${SCRIPT_NAME} show <env-name>
"
        EXIT
    fi

    # Parse the env file and display it
    parse_env_file "$name"
}


parse_env_file() {
    local name="$1"
    local file="$(make_env_file_name "${name}")"

    if [[ ! -f $file ]]; then
        EXIT_ERROR 1 "Environment \"${name}\" does not exist."
    fi

    # Unset all environment variables beginning with 'BORG_'
    unset $(env | grep -P '^BORG_' | cut -d'=' -f1)

    # Build environment in an encapsulated process with clean env
    env -i bash -c "
        # Clean the rest of the env variables
        unset \$(env | cut -d'=' -f1)

        # Make the env name available to the env config
        BORG_ENV=\"${name}\"

        # Provide 'local' functionality
        local() {
            # TODO: reset IFS?
            IFS=$'\n'
            for __BORG_ENV_LOCAL__var in \"\$@\"; do
                __BORG_ENV_LOCAL__LOCAL_VARS+=(\"\${__BORG_ENV_LOCAL__var/=*/}\")
                if [[ \$__BORG_ENV_LOCAL__var =~ ^.*= ]]; then
                    declare -g \"\$__BORG_ENV_LOCAL__var\"
                fi
            done
            # TODO: reset IFS?
            unset IFS
        }

        set -o allexport                               # Export every new variable
        source \"$(get_default_env_file)\" >/dev/null  # Source the default env file
        source \"${file}\" >/dev/null                  # Source the env file
        set +o allexport                               # Stop exporting every new variable

        # Unset all local variables
        unset \${__BORG_ENV_LOCAL__LOCAL_VARS[@]}
        unset \$(env | grep -P '^__BORG_ENV_LOCAL__' | cut -d'=' -f1)

        # Unset special variables
        unset cmd

        # Export the env name to make sure it is not overwritten
        export BORG_ENV=\"${name}\"

        # Print the environment (and skip the '_' variable)
        env | grep -v '^_='
    "
}


edit() {
    local file="$1"

    $EDIT "$file"
}


help() {
    echo -n "$USAGE"
    echo "$HELP"
}


usage() {
    echo -n "$USAGE"
    echo "$COMMANDS"
}


setup() {
    local defaultEnvFile="$(get_default_env_file)"
    create_dir "$CONFIG_DIR" "Could not create config directory \"${CONFIG_DIR}\"!"
    create_dir "$ENVIRONMENTS"

    if [[ ! -f "$defaultEnvFile" ]]; then
        make_default_config
    fi
}


get_env_name() {
    local name="$1"

    if [[ $name == '-' ]]; then
        if [[ $BORG_ENV == '' ]]; then
            EXIT_ERROR 1 "Currently not in any borg-env."
        fi

        name="$BORG_ENV"
    fi

    echo $name
}


get_default_env_file() {
    make_env_file_name "$DEFAULT_ENV"
}


make_env_file_name() {
    local name="$1"

    echo "${ENVIRONMENTS}/${name}.${ENV_SUFFIX}"
}


create_dir() {
    local dir="$1"
    local errMsg="${2:-"Could not create directory \"${dir}\"!"}"

    if [[ ! -d $dir ]]; then
        mkdir -p "$dir" || EXIT_ERROR $? "$errMsg"
    fi
}


make_default_config() {
    local defaultEnvFile="$(get_default_env_file)"

    cat >"$defaultEnvFile" <<EOF
# This is the default borg environment file. It will be loaded every time the environment is changed.
# All BORG_* variables will be unset anyways, so you don't have to overwrite them all here.
#
# Example usage:
#
#   BORG_REPO=/path/to/default/borg/repo
#   # Just unset this one
#   SOME_OTHER_VARIABLE=

EOF
}


EXIT_ERROR() {
    local code=${1:-0}
    local msg="$2"

    echo "ERROR: ${msg}"
    EXIT $code
}


EXIT() {
    local code=${1:-0}
    exit $code
}


# Sanity checks
# DO NOT USE ANY FUNCTION DEFINED IN THIS SCRIPT DURING SANITY CHECKS AS THEY MIGHT FAIL
# DO NOT USE ANY FUNCTION DEFINED IN THIS SCRIPT DURING SANITY CHECKS AS THEY MIGHT FAIL
# DO NOT USE ANY FUNCTION DEFINED IN THIS SCRIPT DURING SANITY CHECKS AS THEY MIGHT FAIL
if [[ $HOME == '' ]]; then
    echo "[FATAL ERROR]: The \$HOME environment variable is empty or not set!"
    exit 255
fi


# Run the main program
main "$@"

